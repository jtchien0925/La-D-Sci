bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
#check every 500bp in visualized histogram
hist(which(findgaps>1, arr.ind=TRUE), breaks= 20)
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
#mysqu1<- readDNAStringSet(file="PCO.V1.fasta",format="fasta")
library(GenomicFeatures)
bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
#check every 500bp in visualized histogram
hist(which(findgaps>1, arr.ind=TRUE), breaks= 20)
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
#mysqu1<- readDNAStringSet(file="PCO.V1.fasta",format="fasta")
library(GenomicFeatures)
bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
#check every 500bp in visualized histogram
hist(which(findgaps>1, arr.ind=TRUE), breaks= 20)
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
#mysqu1<- readDNAStringSet(file="PCO.V1.fasta",format="fasta")
library(GenomicFeatures)
bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
#check every 500bp in visualized histogram
hist(which(findgaps>1, arr.ind=TRUE), breaks= 20)
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
#mysqu1<- readDNAStringSet(file="PCO.V1.fasta",format="fasta")
library(GenomicFeatures)
bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
#mysqu1<- readDNAStringSet(file="PCO.V1.fasta",format="fasta")
library(GenomicFeatures)
bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
#check every 500bp in visualized histogram
hist(which(findgaps>1, arr.ind=TRUE), breaks= 20)
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
#mysqu1<- readDNAStringSet(file="PCO.V1.fasta",format="fasta")
library(GenomicFeatures)
bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
#check every 500bp in visualized histogram
hist(which(findgaps>1, arr.ind=TRUE), breaks= 20)
mysqu1<- readDNAStringSet(file.choose(),format="fasta")
#mysqu1<- readDNAStringSet(file="PCO.V1.fasta",format="fasta")
library(GenomicFeatures)
bases=alphabetFrequency(mysqu1[[1]],baseOnly=TRUE)
bases[1:4]
ntotBases=sum(bases[1:4])
baseFreq=bases[1:4]/ntotBases
GCcontent=baseFreq["C"]+baseFreq["G"]
cg=matchPattern("CG", mysqu1[[1]])
ncg=length(cg)
#please input iRange length
ncg/(baseFreq["C"]*baseFreq["G"]*ntotBases)
tg=matchPattern("TG", mysqu1[[1]])
ntg=length(tg)
#please input iRange length
ntg/(baseFreq["T"]*baseFreq["G"]*ntotBases)
ss=seq(1, length(mysqu1[[1]]), by=1000)
ss=ss[-length(ss)]
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
ff=alphabetFrequency(Seq.set, baseOnly=TRUE)
pCG=(ff[,"C"]+ff[,"G"])/rowSums(ff)
hist(pCG[pCG>0],100)
Seq.set=DNAStringSet(mysqu1[[1]], start=ss, end=ss+999)
nCG=vcountPattern("CG", Seq.set)
obsExp=nCG*1000/(ff[,"C"]*ff[,"G"])
mean(obsExp,na.rm=TRUE)
hist(obsExp,100)
findgaps<-ff[,"other"]
which(findgaps>1, arr.ind=TRUE)
#check every 500bp in visualized histogram
hist(which(findgaps>1, arr.ind=TRUE), breaks= 20)
g <- graph( c(0,1, 0,2, 1,2, 2,4), n=5 )
install.packages("igraph")
library (igraph)
which
which R
R
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("graph")
version
biocLite("BioInstaller")
library(graph)
set.seed(123)
g1 = randomEGraph(LETTERS[1:15], edges=100)
g1
plot(g1)
biocLite("Rgraphviz")
plot(g1)
R CMD INSTALL ('http://github.com/spedygiorgio/markovchain/')
install.packages('http://github.com/spedygiorgio/markovchain/')
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
version
biocLite("birta")
# load the package
library(MASS)
data(iris)
# fit model
fit <- lda(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# fit model
version
setInternet2(TRUE)
install.packages("installr")
version
library(MASS)
library VGAM
library (VGAM)
install.packages(VGAM)
library (VGAM)
install.packages(stats4)
library (VGAM)
library(caret)
library(caret)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(caret)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
library(caret)
install.packages("forecast", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(caret)
install.packages("package's name", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(caret)
install.packages("FinancialInstrument", repos="http://R-Forge.R-project.org")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
library(caret)
# load library
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
install.packages("bbmle")
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
# simulation
probabilities <- predict(model, iris[,1:4], type="response")
sim <- apply(probabilities, 1, which.max)
sim[which(sim=="1")] <- levels(iris$Species)[1]
sim[which(sim=="2")] <- levels(iris$Species)[2]
sim[which(sim=="3")] <- levels(iris$Species)[3]
# summarize accuracy
table(sim, iris$Species)
install.packages("glm")
# load library
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=binomial, data=iris)
library(VGAM)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
warnings()
# simulation
probabilities <- predict(model, iris[,1:4], type="response")
sim <- apply(probabilities, 1, which.max)
sim[which(sim=="1")] <- levels(iris$Species)[1]
sim[which(sim=="2")] <- levels(iris$Species)[2]
sim[which(sim=="3")] <- levels(iris$Species)[3]
# summarize accuracy
table(sim, iris$Species)
suppressWarnings(warning("model"))
model <- vglm(Species~., family=multinomial, data=iris)
model = model warning("There were 20 warnings", call.=FALSE)
model
# load library
library(VGAM)
options(warn=-1)
# load data
data(iris)
# build model
model <- vglm(Species~., family=multinomial, data=iris)
# simulation
probabilities <- predict(model, iris[,1:4], type="response")
sim <- apply(probabilities, 1, which.max)
sim[which(sim=="1")] <- levels(iris$Species)[1]
sim[which(sim=="2")] <- levels(iris$Species)[2]
sim[which(sim=="3")] <- levels(iris$Species)[3]
# summarize accuracy
table(sim, iris$Species)
```
最後就是PLS。首先先執行以下指令：
```{r}
install.packages("FinancialInstrument", repos="http://R-Forge.R-project.org")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
# load library
library(caret)
data(iris)
x <- iris[,1:4]
y <- iris[,5]
# fit model
fit <- plsda(x, y, probMethod="Bayes")
# make predictions
predictions <- predict(fit, iris[,1:4])
install.packages("pls")
# load library
library(caret)
data(iris)
x <- iris[,1:4]
y <- iris[,5]
# fit model
fit <- plsda(x, y, probMethod="Bayes")
# make predictions
predictions <- predict(fit, iris[,1:4])
install.packages("klaR")
library(caret)
data(iris)
x <- iris[,1:4]
y <- iris[,5]
# fit model
fit <- plsda(x, y, probMethod="Bayes")
# make predictions
predictions <- predict(fit, iris[,1:4])
# summarize accuracy
table(predictions, iris$Species)
```
# load the package
library(MASS)
data(iris)
# fit model
fit <- qda(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# load the package
library(klaR)
data(iris)
# fit model
fit <- rda(Species~., data=iris, gamma=0.05, lambda=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# load the package
library(caret)
data(iris)
# fit model
fit <- knn3(Species~., data=iris, k=5)
install.packages("lattice")
install.packages("lattice")
install.packages("ggplot2")
library(caret)
data(iris)
# fit model
fit <- knn3(Species~., data=iris, k=5)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4], type="class")
# summarize accuracy
table(predictions, iris$Species)
# load the package
library(e1071)
install.packages("e1071")
library(e1071)
data(iris)
# fit model
fit <- naiveBayes(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])
# summarize accuracy
table(predictions, iris$Species)
setwd("~/Desktop/Blog/code/non-linear classfication")
# load the package
library(MASS)
data(iris)
# fit model
fit <- qda(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# load the package
library(klaR)
data(iris)
# fit model
fit <- rda(Species~., data=iris, gamma=0.05, lambda=0.01)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])$class
# summarize accuracy
table(predictions, iris$Species)
# load the package
#install.packages("lattice")
#install.packages("ggplot2")
library(caret)
library("lattice")
library("ggplot2")
data(iris)
# fit model
fit <- knn3(Species~., data=iris, k=5)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4], type="class")
# summarize accuracy
table(predictions, iris$Species)
# load the package
#install.packages("e1071")
library(e1071)
data(iris)
# fit model
fit <- naiveBayes(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])
# summarize accuracy
table(predictions, iris$Species)
